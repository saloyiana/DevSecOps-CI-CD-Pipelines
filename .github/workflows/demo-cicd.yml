# This is a basic workflow to help you get started with Actions

name: Demo

# Controls when the workflow will run
on:
#   # Auto Triggers
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]
  # Manual Trigger
  workflow_dispatch:

env:
  Image: 'saloyiana/demo-app'
  Tag: '${{github.run_number}}'
  ProjectName: 'demo-app'
  HelmchartPath: '$GITHUB_WORKSPACE/chart/demo-app'


jobs:
  # This workflow contains a single job called "build"
  build:
    name: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8"]
  
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

        #  to lint code
#       - name: Lint with flake8
#         run: |
#           # stop the build if there are Python syntax errors or undefined names
#           flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#           # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#           flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          # pytest
           echo "testing"
 
      # SAST
#       - name: sca
#         run: |
#           echo "install mend" 
#           sudo curl "https://downloads.mend.io/ws-cli/master/latest/ws-cli-linux-amd64/ws" \
#             -o "/usr/local/bin/ws" 
#           sudo chmod +x "/usr/local/bin/ws"
#           echo "run scan"
#           ws scan
          
      # Dependenies check
      - name: sast
        run: |
          echo "we can use sonarqube" 
          echo "for more security" 

      # Build image
      - name: build image
        run: |
          pwd
          docker build -f $GITHUB_WORKSPACE/app/Dockerfile -t ${{ env.Image }}:${{ env.Tag }} $GITHUB_WORKSPACE/app/

      # Image scan
      - name: image scan
        continue-on-error: true
        run: |
          echo "install trivy" 
          sudo apt-get install rpm   
          wget https://github.com/aquasecurity/trivy/releases/download/v0.16.0/trivy_0.16.0_Linux-64bit.deb   
          sudo dpkg -i trivy_0.16.0_Linux-64bit.deb
          echo "run scan" 
          trivy image --exit-code 0 --severity LOW,MEDIUM ${{ env.Image }}:${{ env.Tag }}    
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ env.Image }}:${{ env.Tag }}     
  
      # Manifests scan
      - name: manifests scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          framework: kubernetes
        continue-on-error: true
        
      # Sign image prepration
#       - name: upload key
#         run: |
#           docker login -u -p 
#           docker push -t ${{ env.Image }}:${{ env.Tag }}
  
      # Docker login
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
#       # Push image
#       - name: push image
#         run: | 
#           docker push ${{ env.Image }}:${{ env.Tag }}
    
      - name: docker-sign
        uses: sudo-bot/action-docker-sign@latest
        with:
          image-ref: ${{ env.Image }}:${{ env.Tag }}
          private-key-id: ${{ secrets.PRIVATE_KEY_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          private-key-passphrase: ${{ secrets.PRIVATE_KEY_PASSPHRASE }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # project deploy to test
#       - name: project deploy
#         run: |
#           helm upgarde --wait --install ${{ env.ProjectName }} ${{ env.HelmchartPath }} \
#             --set image=${{ env.Image }} --set image.tag=${{ env.Tag }} -n test-env 

      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
          fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
      - name: update tag
        run: |
          sed -i 's/repository:.*/repository:\ "saloyiana\/demo-app"/g' ${{ env.HelmchartPath }}/values.yaml
          sed -i 's/tag:.*/tag:\ "${{ env.Tag }}"/g' ${{ env.HelmchartPath }}/values.yaml

      - name: commit changes
        env: 
          CI_COMMIT_MESSAGE: release with tag ${{ env.Tag }}
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git pull origin test-env
          git commit -a -m "${{ env.CI_COMMIT_MESSAGE }}"
    
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.PAT }}
          branch: test-env

      # DAST
      - name: dast
        run: echo "run dast" 
      # Manifests scan
      - name: performance test
        run: echo "run test"  
        
      # project deploy to prod
#       - name: project deploy
#         run: |
#           helm upgarde --wait --install ${{ env.ProjectName }} ${{ env.HelmchartPath }} \
#             --set image=${{ env.Image }} --set image.tag=${{ env.Tag }} -n prod-env 

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.PAT }}
          branch: prod-env
